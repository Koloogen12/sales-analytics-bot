from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from datetime import datetime
from database.models import Chat
from services.notify import notify

router = Router()

# üìã –¢–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
COMMANDS = [
    ("üëã /start", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
    ("‚ÑπÔ∏è /help", "–°–ø—Ä–∞–≤–∫–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"),
    ("üìù /register", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ"),
    ("üÜî /myid", "–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram chat_id"),
    ("üìå /mytasks", "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞–Ω–∏–π"),
    ("üì• /import_forms", "–ò–º–ø–æ—Ä—Ç –∏–∑ Google Forms"),
    ("üìä /update_report", "–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É"),
    ("üí¨ /start_dialog", "–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"),
    ("‚úÖ /end_dialog", "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∏ –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"),
]

# üëã /start
@router.message(Command("start"))
async def handle_start(message: Message):
    text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
    for cmd, desc in COMMANDS:
        text += f"{cmd} ‚Äî {desc}\n"
    await message.answer(text.strip())

# ‚ÑπÔ∏è /help
@router.message(Command("help"))
async def handle_help(message: Message):
    text = "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
    for cmd, desc in COMMANDS:
        text += f"{cmd} ‚Äî {desc}\n"
    await message.answer(text.strip())

# üó® –ø—Ä–∏–≤–µ—Ç
@router.message(lambda msg: msg.text.lower() == "–ø—Ä–∏–≤–µ—Ç")
async def handle_hello(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é.")

# üí¨ –û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞ —Ä–µ–ø–ª–∞–π
@router.message(F.reply_to_message)
async def manager_reply_handler(message: Message):
    try:
        original_sender_id = message.reply_to_message.from_user.id
        chat = await Chat.get(telegram_user_id=original_sender_id)

        chat.messages.append({
            "from": "manager",
            "text": message.text,
            "timestamp": datetime.now().isoformat()
        })
        await chat.save()

        await notify(original_sender_id, f"üì© –û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n{message.text}")
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ùó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

# üìù –°–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–ù–ï –∫–æ–º–∞–Ω–¥—ã)
@router.message(lambda msg: not msg.text.startswith("/"), flags={"block": False})
async def manager_message_handler(message: Message):
    sender_id = message.from_user.id
    try:
        chat = await Chat.get(telegram_user_id=sender_id)
        chat.messages.append({
            "from": "manager",
            "text": message.text,
            "timestamp": datetime.now().isoformat()
        })
        await chat.save()
        await message.answer("üì• –°–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    except:
        pass
