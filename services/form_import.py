import logging
import gspread
from datetime import datetime
from collections import defaultdict
from google.oauth2 import service_account

from loader.config import config

logger = logging.getLogger(__name__)

FORM_FIELDS = [
    "–ö-–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤ –≤—Å–µ–≥–æ –∑–∞ –¥–µ–Ω—å",
    "–ö-–≤–æ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
    "–ö-–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
    "–ö-–≤–æ –Ω–æ–≤–∏—á–∫–æ–≤ –Ω–∞–ø–∏—Å–∞–ª–æ",
    "–ö-–≤–æ –Ω–æ–≤–∏—á–∫–æ–≤ –∫—É–ø–∏–ª–æ",
    "–ö-–≤–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏",
    "–ö-–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–æ–¥–ª–∏–ª–æ",
    "–ö-–≤–æ –æ—Ç–∫–∞–∑–æ–≤",
    "–ö-–≤–æ —Å–º—Å —Å—Ç–∞—Ä–∏—á–∫–∞–º –±–µ–∑ –æ—Ç–≤–µ—Ç–∞",
    "–ö-–≤–æ –≤—ã–¥–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤",
    "–ö-–≤–æ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤ –∑–∞ –¥–µ–Ω—å –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤",
    "–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –≤—ã—Ä—É—á–∫–∞ –∑–∞ –¥–µ–Ω—å",
    "–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –≤—ã—Ä—É—á–∫–∞ –ø–æ –Ω–æ–≤–∏—á–∫–∞–º",
    "–ú–ø—Å—Ç–∞—Ç—Å",
    "–í–∞–π–ª–¥–±–æ–∫—Å",
    "–ú–∞—Ä–∫–µ—Ç–≥—É—Ä—É",
    "–ú–∞–Ω–∏–ø–ª–µ–π—Å",
    "–ú–ø—Å—Ç–∞—Ç—Å+–º–∞—Ä–∫–µ—Ç—É—Ä—É",
    "–ú–ø—Å—Ç–∞—Ç—Å+–≤–∞–π–ª–¥–±–æ–∫—Å",
    "–ú–ø—Å—Ç–∞—Ç—Å+–º–∞–Ω–∏–ø–ª–µ–π—Å",
]

def get_form_sheet():
    creds = service_account.Credentials.from_service_account_file(
        config.google_credentials_file,
        scopes=config.google_scopes
    )
    client = gspread.authorize(creds)
    return client.open_by_key(config.google_form_sheet_id).worksheet(config.google_form_sheet_name)

async def run_forms_import_with_result():
    try:
        sheet = get_form_sheet()
        rows = sheet.get_all_values()[1:]  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        logger.info(f"üßæ –ù–∞–π–¥–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤: {len(rows)}")

        aggregated = defaultdict(lambda: defaultdict(int))
        managers = set()
        dates = set()

        for row in rows:
            if len(row) < 3:
                continue

            timestamp = row[0].strip()
            manager = row[2].strip()

            try:
                date = datetime.strptime(timestamp, "%d.%m.%Y %H:%M:%S").strftime("%Y-%m-%d")
            except:
                continue

            managers.add(manager)
            dates.add(date)

            for i, field in enumerate(FORM_FIELDS):
                try:
                    value = float(row[i + 3].strip())
                except:
                    value = 0
                aggregated[(date, manager)][field] += value

        return {
            "total": len(rows),
            "new_count": len(rows),
            "aggregated": aggregated,
            "managers": list(managers),
            "dates": list(dates),
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Ñ–æ—Ä–º—ã: {e}")
        return {
            "total": 0,
            "new_count": 0,
            "aggregated": {},
            "managers": [],
            "dates": []
        }
