import gspread
from oauth2client.service_account import ServiceAccountCredentials
from loader.config import config
import datetime
import logging
from services.notify import notify
from googleapiclient.discovery import build

logger = logging.getLogger(__name__)

async def append_feedback_to_sheet(manager: str, feedback: str, dialog: list[dict]):
    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive",
        "https://www.googleapis.com/auth/spreadsheets"
    ]

    try:
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            config.google_credentials_file, scope
        )
        client = gspread.authorize(creds)
        sheet = client.open_by_key(config.google_sheet_id)
        worksheet = sheet.worksheet(config.google_sheet_name_gpt)

        now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
        if dialog and any(msg.get("text") for msg in dialog):
            formatted_dialog = ""
            for msg in dialog:
                author = msg.get("author", "user")
                text = msg.get("text", "").strip()
                if text:
                    formatted_dialog += f"{author}: {text}\n"
            formatted_dialog = formatted_dialog.strip()
        else:
            formatted_dialog = "–ù–µ—Ç –¥–∏–∞–ª–æ–≥–∞"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
        row = [manager, now, formatted_dialog, feedback]
        worksheet.append_row(row, value_input_option="USER_ENTERED")

        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ Google Sheet: {manager}, {now}")

        # === –ê–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Sheets API ===
        sheets_service = build("sheets", "v4", credentials=creds)
        sheet_id = config.google_sheet_id
        sheet_name = config.google_sheet_name_gpt

        # –ü–æ–ª—É—á–∞–µ–º ID –ª–∏—Å—Ç–∞
        spreadsheet = sheets_service.spreadsheets().get(spreadsheetId=sheet_id).execute()
        sheet_metadata = next(
            s for s in spreadsheet["sheets"]
            if s["properties"]["title"] == sheet_name
        )
        sheet_gid = sheet_metadata["properties"]["sheetId"]
        last_row_index = len(worksheet.get_all_values())

        # –ó–∞–ø—Ä–æ—Å –Ω–∞ wrap –∏ –∞–≤—Ç–æ—à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        body = {
            "requests": [
                {
                    "repeatCell": {
                        "range": {
                            "sheetId": sheet_gid,
                            "startRowIndex": last_row_index - 1,
                            "endRowIndex": last_row_index,
                        },
                        "cell": {
                            "userEnteredFormat": {
                                "wrapStrategy": "WRAP"
                            }
                        },
                        "fields": "userEnteredFormat.wrapStrategy"
                    }
                },
                {
                    "updateDimensionProperties": {
                        "range": {
                            "sheetId": sheet_gid,
                            "dimension": "COLUMNS",
                            "startIndex": 0,
                            "endIndex": 4
                        },
                        "properties": {
                            "pixelSize": 300
                        },
                        "fields": "pixelSize"
                    }
                }
            ]
        }

        sheets_service.spreadsheets().batchUpdate(
            spreadsheetId=sheet_id,
            body=body
        ).execute()

        logger.info("üé® –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–æ.")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É: {e}")
        try:
            worksheet.append_row([manager, now, "–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –¥–∏–∞–ª–æ–≥–∞", feedback or "–û—à–∏–±–∫–∞ GPT"])
        except Exception as inner:
            logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏: {inner}")
            try:
                await notify(config.chat_id, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {inner}")
            except:
                pass
